#+TITLE: Основы проектирования ЗТКС
#+AUTHOR: Максим Захаров. Цивин Сергей Владимирович
#+STARTUP: indent

* Организация процесса по времени
<2011-02-25 Пт.>

В RUP жизненный цикл системы состоит из циклов, каждый из которых направлен на создание новых поколений изделий. Каждый цикл состоит из 4 стадий (вех):
- начало;
- уточнение;
- конструирование;
- переход.

Веха — временная точка, в которой принимаются критические для жизни проекта решения.

** Начальная стадия

Цель: создать представление о продукте (vision). Эта фаза посвящена уточнению цели и определению целесообразности дальнейшей работы над системой. На этом этапе разрабатывается /бизнес-план/ и основные /прецеденты/.

** Стадия уточнения

Цель стадии — снизить риски, разработать архитектурный «костяк» системы, формулировать большинство требований и получить реалистичные оценки продолжительности и трудоёмкости разработки.

На этом этапе реализуются некоторые наиболее значимые требования (прецеденты). Для отброса прецедентов выполняется их ранжирование на основе рисков, /охвата проблем/ и /критичности элементов/ системы.

** Стадия конструирования

Цель стадии — завершение разработки приложения, альфа-тестирование, подготовка к бета-тестированию. Если стадия развития характеризуется построением критичного и архитектурно важного ядра системы, то на стадии конструирования создаётся остальная часть.

На этой стадии рекомендуется задействовать небольшой мобильный коллектив.

** Стадия перехода

Цель стадии — ввод системы в промышленную эксплуатацию. На этой стадии выполняется бета-тестирование, настройка, обучение пользователей, допускается параллельная работа старой и новой системы.

В процессе стадии программное обеспечение передаётся пользователям.

** [[http:epf.eclipse.org/wikis/openupru/][Open UP]]

OpenUP — это открытый процесс разработки ПО, который разработан для небольших команд, находящихся в одном месте, которые хотят воспользоваться гибким подходом к разработке. Является итерационным процессом, который Минимален, Полон и Расширяем.

* Адаптивные процессы (agile process)

** Экстремальное программирование

Адаптивные процессы основаны на принципе поощрения творческого процесса и упрощения формальностей.

Основные ценности экстремального программирования:
1) Свободный обмен информации.
2) Простота.
3) Тесная обратная связь с заказчиком.
   
Основные моменты экстремального программирования:
1) Короткий цикл разработки.
2) За один цикл планируется реализовать определённое количество историй пользователя.
3) К концу цикла программа должна быть полностью работоспособна и протестирована.
4) Поздние принятия решений.
5) Кодирование в глубину — любая часть работы должна быть закончена прежде, чем начнётся работа над другими частями.
6) Готовая часть кода должна включать UI, прикладную логику и набор тестов для проверки.
7) Рефакторинг (регулярное улучшение внутренней структуры программы).
8) Модульное тестирование.
9) История пользователей (компактный аналог use-case).
10) Тесты приёмки (с точки зрения конечного пользователя).
11) Тесная связь с представителем заказчика.
12) Структура группы разработчиков (желательно в одном помещении).
    
** Методология SCRUM

SCRUM — методология гибкой разработки.

Основные характеристики:
- простота;
- главенствующая роль команды.
  
Роли SCRUM:
1) Скрам-мастер.
2) Владелец продукта.
3) Команда.
   
Скрам-мастер отвечает за успех Scrum в проекте.

Основные обязанности Скрам Мастера таковы:
- создаёт атмосферу доверия;
- участвует в митингах в качестве фасилитатора;
- устраняет препятствия;
- делает проблемы и открытые процессы видимыми;
- отвечает за соблюдение практик и процесса в команде;
- Скрам Мастер ведёт Daily Scrum Meeting и отслеживает прогресс команды при помощи Sprint Backlog, отмечая статус всех задач в спринте;
- Скрам Мастер может также помогать Владельцу продукта создавать Backlog в команде.
  
Владелец продукта отвечает за разработку продукта.

Обязанности Владельца продукта:
- отвечает за формирование product vision;
- управляет ROI;
- управляет ожиданиями заказчиков и всех заинтересованных лиц;
- координирует и приоритизирует Product backlog;
- предоставляет понятные и тестируемые требования команде;
- взаимодействует с командой и заказчиком;
- ставит задачи команде;
- отвечает за приёмку кода в конце каждой итерации.

Команда.

1) В методологии Scrum команда является самоорганизующейся и самоуправляемой. Команда берёт на себя обязательства по выполнению объёма работ на спринт перед Product Owner. Работа команды оценивается как работа единой группы. В Scrum вклад отдельных членов проектной команды не оценивается, т. к. это разваливает самоорганизацию команды.
2) Размер команды ограничивается размером группы людей, способных эффективно взаимодействовать лицом к лицу. Типичный размер команды — 7 плюс минус 2.
3) Команда Scrum кроссфункциональна. В неё входят люди с различными навыками — разработчики, аналитики, тестировщики.
4) Для облегчения коммуникаций команда должна находится в одном месте.

Обязанности команды:
- отвечает за оценку элементов баклога;
- принимает решения по имплементации и дизайну;
- разрабатывает софт и предоставляет его заказчику;
- отслеживает собственный прогресс;
- отвечает за результат перед Владельцем продукта.

Артефакты Backlog:
1) Product backlog — это приоритизированный список имеющихся на данный момент бизнес-требований и технических требований к системе. Постоянно пересматривается и дополняется — в него включаются новые требования, удаляются ненужные, пересматриваются приоритеты.
2) Spring backlog содержит функциональность, выбранную владельцем продукта из Product backlog. Все функции разбиты по задачам, каждая из которых оценивается командой. Каждый день команда оценивает объём работ, который нужно проделать для завершения задач.

Жизненный цикл Scrum:
1) В Scrum итерация называется Sprint (1 месяц).
2) Результатом Sprint является готовый продукт (build), который можно передавать (deliver) заказчику.
3) Каждый спринт представляет собой маленький «водопад».

Планирование спринта. В начале команда, владелец продукта, Scrum master, пользователя, менеджмент для определения целей. 
